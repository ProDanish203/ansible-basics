---
- name: Remove old Docker packages
  apt:
    name: "{{ item }}"
    state: absent
  loop:
    - docker-ce
    - docker-ce-cli
    - docker
    - docker.io
    - docker-doc
    - docker-compose
    - docker-compose-v2
    - podman-docker
    - docker-engine
    - containerd
    - runc
  become: true

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  become: true

- name: Update package cache after adding Docker repo
  apt:
    update_cache: yes
  become: true

- name: Install Docker packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  become: true
  notify: restart docker

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: true
  become: true

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: true
  become: true

- name: Check if Docker is running
  command: docker --version
  register: docker_version
  changed_when: false
  become: true

- name: Display Docker version
  debug:
    msg: "Docker version: {{ docker_version.stdout }}"
  when: docker_version is defined
  become: true

- name: Stop existing container if running
  docker_container:
    name: "{{ container_name }}"
    state: absent
  when: docker_version is defined
  become: true
  ignore_errors: true

- name: Remove existing Docker image
  docker_image:
    name: "{{ docker_image }}"
    state: absent
    force_absent: true
  when: docker_version is defined
  become: true
  ignore_errors: true

- name: Pull Docker image
  docker_image:
    name: "{{ docker_image }}"
    source: pull
    force_source: true
    pull:
      platform: linux/amd64
  when: docker_version is defined
  become: true

- name: Run docker container
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ app_port }}:3000"
    env:
      NODE_ENV: production
  when: docker_version is defined
  become: true
  notify: restart docker

- name: Verify container is running
  docker_container_info:
    name: "{{ container_name }}"
  register: container_info
  when: docker_version is defined

- name: Display container status
  debug:
    msg: "Container '{{ container_name }}' is running with status: {{ container_info.container.State.Status }}"
  when: container_info is defined
